## Project: Automated Network Testbed with Performance Monitoring

### 1. Project Architecture Design

**Objective:**
Design a scalable virtual network environment to simulate enterprise-level networking scenarios. This network will include DNS, DHCP, firewall configurations, and automated deployment scripts. The system will also integrate performance monitoring and debugging tools to ensure real-time observation of network traffic and performance bottlenecks.

### 2. Network Architecture Overview

**Topology:**
- Core Network (Simulated Data Center)
- Firewall (pfSense or UFW)
- DHCP Server
- DNS Server
- Monitoring Node (Prometheus + Grafana)
- Client Nodes (Virtual Machines or Containers)

**Virtualization Tools:**
- VirtualBox / VMware Workstation for virtual environments
- GNS3 for network emulation (optional)

**Automation Tools:**
- Python for scripting network automation and deployments
- Ansible for configuration management (firewall rules, DHCP, DNS)

**Monitoring Tools:**
- Prometheus (data scraping and monitoring)
- Grafana (visualization and dashboards)
- Wireshark (network packet capture and analysis)

### 3. Network Diagram (Description)
The testbed consists of a core data center with a pfSense firewall protecting internal virtual machines. DNS and DHCP services run on separate virtual machines to provide essential network services. The monitoring node collects metrics from client machines, and dashboards visualize real-time traffic.

**Components:**
- **Firewall:** Controls inbound/outbound traffic with custom rules.
- **DNS Server:** Resolves hostnames to IP addresses.
- **DHCP Server:** Dynamically assigns IP addresses to clients.
- **Monitoring Node:** Collects network metrics and system performance data.
- **Clients:** Test machines running various network simulations.

### 4. Network Diagram

![Network Architecture Diagram](diagrams/network_architecture.png)

### 5. Diagram Legend
- **Blue Lines:** Internal traffic within the testbed
- **Red Lines:** Firewall boundaries
- **Dashed Lines:** Monitoring and logging traffic

### 6. Repository Structure

network-testbed-automation/
├── scripts/
│   ├── deploy_network.py  # Automates VM deployment
│   ├── configure_firewall.yml  # Ansible playbook for firewall config
│   └── monitor_setup.sh  # Bash script for monitoring tool setup
├── configs/
│   ├── dns_config.conf  # DNS server configuration
│   ├── dhcp_config.conf  # DHCP server configuration
│   └── firewall_rules.conf  # Firewall rule definitions
├── diagrams/
├── docs/
│   ├── PROJECT_REPORT.md
│   ├── README.md
│   └── DEPLOYMENT_GUIDE.md
└── performance_reports/


### Deployment Guide

#### Prerequisites
- VirtualBox or VMware Workstation installed.
- Python 3.x and Ansible installed on the control node.
- SSH access configured for target machines.

#### Deployment Steps
1. Clone the repository:
   
   git clone https://github.com/username/network-testbed-automation.git
   cd network-testbed-automation
   

2. Create an inventory file for Ansible:
   
   [network_lab]
   192.168.1.10 ansible_user=root ansible_ssh_pass=password
   192.168.1.11 ansible_user=root ansible_ssh_pass=password
   

3. Deploy virtual machines:
   
   python3 scripts/deploy_network.py
   

4. Configure DNS, DHCP, and firewall rules:
   
   ansible-playbook -i inventory.ini scripts/configure_firewall.yml
   

5. Install Prometheus and Grafana for monitoring:
   
   bash scripts/monitor_setup.sh
   

#### Verification
- **Firewall:**
  
  sudo ufw status

  Ensure necessary ports (22, 53, 67, 80, 443) are open.

- **DNS:**
  
  dig example.com
  
  Ensure DNS queries resolve correctly.

- **DHCP:**
  
  journalctl -u isc-dhcp-server
  
  Verify that clients are receiving IP addresses.

- **Monitoring Tools:**
  Access Grafana dashboards at `http://<monitoring_node_ip>:3000`.

#### Troubleshooting
- **Firewall Rules Not Applied:** Re-run the playbook and check the UFW status.
- **DNS Resolution Issues:** Inspect logs with `journalctl -u bind9`.
- **DHCP Service Issues:** Restart the DHCP server:
  
  sudo systemctl restart isc-dhcp-server
  

### PROJECT_REPORT.md
#### Objectives
- Design a scalable, automated network testbed.
- Implement core network services (DNS, DHCP, Firewall).
- Integrate monitoring tools to visualize and debug performance.

#### Implementation
- Virtual machines deployed using a Python script.
- Network services configured with Ansible for consistency and scalability.
- Monitoring set up with Prometheus and Grafana for real-time insights.

#### Testing Results
- Verified DNS query resolution with `dig`.
- Confirmed DHCP leases assigned dynamically to clients.
- Ensured firewall rules restricted/allowed traffic as expected.
- Visualized metrics on Grafana dashboards (CPU usage, traffic flow).

#### Challenges and Solutions
- **Issue:** Initial firewall rules blocked SSH access.
  **Solution:** Added explicit rules to allow SSH traffic on port 22.

- **Issue:** DHCP server misconfiguration caused lease failures.
  **Solution:** Corrected `dhcpd.conf` to match the network range.

#### Conclusion
This project successfully demonstrates the automation of network deployment and configuration. The monitoring tools provide real-time insights, making it a robust solution for testing and debugging networking scenarios.

#### Contributing
Feel free to fork this repository and submit pull requests for new features or bug fixes.

#### License
This project is licensed under the MIT License. See the LICENSE file for details.



